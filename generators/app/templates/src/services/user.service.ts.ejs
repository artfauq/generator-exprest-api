import { NotFound } from 'http-errors';<% if (i18n) { %>
import { i18n as I18n } from 'i18next';<% } %>
import { <% if (i18n || redis) { %>Container, <% } %>Service } from 'typedi';
import { CreateUserDTO } from '../dto';
import { User, UserAttributes } from '../models';<% if (redis) { %>
import { SecondEnum } from '../types/enums';
import { RedisService } from '.';<% } %>

@Service()
export class UserService {<% if (redis) { %>
  private redisService: RedisService;

  constructor() {
    this.redisService = Container.get(RedisService);
  }
<% } %>
  /**
   * Returns the details of a user or throws a `NotFound` error if not found.
   */
  async getUser(userId: string): Promise<UserAttributes> {<% if (redis) { %>
    return this.redisService.fetch<UserAttributes>(
      `user_${userId}`,
      SecondEnum.OneWeek,
      async () => {<% if (i18n) { %>
        const i18n = Container.get<I18n>('i18n');<% } %>
        const user = await User.findByPk(userId);

        if (!user) {
          throw new NotFound(<% if (i18n) { %>i18n.t('errors:userNotFound')<% } else { %>'User not found.'<% } %>);
        }

        return user.get({ plain: true });
      },
    );<% } else { %><% if (i18n) { %>
    const i18n = Container.get<I18n>('i18n');<% } %>
    const user = await User.findByPk(userId);

    if (!user) {
      throw new NotFound(<% if (i18n) { %>i18n.t('errors:userNotFound')<% } else { %>'User not found.'<% } %>);
    }

    return user.get({ plain: true });<% } %>
  }

  /**
   * Creates a new user.
   */
  async createUser(userDetails: CreateUserDTO): Promise<UserAttributes> {
    const user = await User.create(userDetails);

    return user.get({ plain: true });
  }
}
