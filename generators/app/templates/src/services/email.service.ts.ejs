import { createTransport } from 'nodemailer';
import Mail from 'nodemailer/lib/mailer';
import { Service } from 'typedi';
import { config } from '../config';

@Service()
export class EmailService {
  public mailer: Mail;

  constructor() {
    this.mailer = createTransport({
      host: config.smtp.host,
      port: config.smtp.port,
      auth: {
        user: config.smtp.user,
        pass: config.smtp.password,
      },
    });
  }

  /**
   * Test SMTP connection.
   */
  async testConnection(): Promise<void> {
    await this.mailer.verify();
  }

  /**
   * Sends an email with configured options.
   *
   * @param options Mail options
   */
  async sendMail(options: Mail.Options): Promise<void> {
    try {
      await this.mailer.sendMail(options);
    } catch (err) {
      throw new Error(`failed to send mail. ${err}. Options: ${JSON.stringify(options)}`);
    }
  }
}
