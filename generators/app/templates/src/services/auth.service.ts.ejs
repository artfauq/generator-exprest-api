<% if (i18n) { -%>import { i18n as I18n } from 'i18next';
<% } %>import { UnauthorizedError } from 'routing-controllers';
import { Container, Service } from 'typedi';
import { LoginDTO } from '../dto';
import { User } from '../models';

@Service()
export class AuthService {
  async login({ email, password }: LoginDTO): Promise<User> {<% if (i18n) { %>
    const i18n = Container.get<I18n>('i18n');
<% } %>
    const user = await User.findOne({
      attributes: {
        include: ['password'],
      },
      where: { email },
    });

    if (!user) {
      throw new UnauthorizedError(<% if (i18n) { %>i18n.t('errors:invalidCredentials')<% } else { %>'Invalid credentials.'<% } %>);
    }

    const passwordMatch = await user.comparePassword(password);

    if (!passwordMatch) {
      throw new UnauthorizedError(<% if (i18n) { %>i18n.t('errors:invalidCredentials')<% } else { %>'Invalid credentials.'<% } %>);
    }

    return user;
  }
}
