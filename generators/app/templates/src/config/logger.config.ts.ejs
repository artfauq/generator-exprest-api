<% if (winston) { -%>
import { existsSync, mkdirSync } from 'fs';
import moment from 'moment';
import { createLogger, format, Logform, transports } from 'winston';<% if (sentry) { %>
import SentryTransport from 'winston-transport-sentry-node';<% } %>
import config from './index';

// Check if logs folder exists
if (!existsSync(config.logsDir)) {
  mkdirSync(config.logsDir);
}

const { colorize, combine, errors, json, metadata, printf, timestamp } = format;

const customFormat: Logform.Format = combine(
  errors({ stack: !config.isTest || config.debug }),
  json(),
  metadata(),
  timestamp({ format: () => moment().format('YYYY-MM-DD HH:mm:ss') }),
);

// Configure logger
const logger = createLogger({
  level: config.debug ? 'debug' : 'info',
  transports: [
    new transports.Console({
      format: combine(
        colorize(),
        customFormat,
        printf(info => {
          const log = `${info.timestamp} ${info.level}: ${info.message}`;

          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
          return info.metadata.stack ? `${log}\n${info.metadata.stack}` : log;
        }),
      ),
    }),
    new transports.File({
      level: 'error',
      dirname: config.logsDir,
      filename: `${moment().format('YYYY-MM-DD')}-errors.log`,
    }),<% if (sentry) { %>
    new SentryTransport({
      level: 'error',
      format: customFormat,
      sentry: config.sentry,
    }),<% } %>
  ],
  exitOnError: false,
});<% } else { %>const logger = console;<% } %>

export default logger;
