import convict from 'convict';
import dotenv from 'dotenv';
import moment from 'moment';
import { resolve } from 'path';

const env = process.env.NODE_ENV || 'development';
const isTest = env === 'test';
const isProduction = env === 'production';

/**
 * Load environment variables
 */
dotenv.config();

/**
 * Configure moment
 */
moment.locale('en');

const config = convict({
  /**
   * Server config
   */
  port: {
    doc: 'Server port',
    format: 'port',
    env: 'PORT',
    default: 8080,
  },

  /**
   * Environment config
   */
  debug: {
    doc: 'Debug mode',
    format: Boolean,
    env: 'DEBUG',
    default: false,
  },
  publicHost: {
    doc: 'Public host of the server',
    format: 'url',
    env: 'PUBLIC_HOST',
    default: 'http://localhost:8080',
  },

  /**
   * Application config
   */<% if (winston) { %>
  logsDir: {
    doc: 'Application logs directory',
    format: String,
    default: `${__dirname}/../../logs`,
  },<% } %>
  publicPath: {
    doc: 'Public assets path',
    format: String,
    default: resolve(`${__dirname}/../../public`),
  },<% if (sequelize) { %>

  /**
   * Database config
   */
  db: {
    host: {
      doc: 'Database host name / IP',
      format: String,
      env: 'DB_HOST',
      default: 'localhost',
    },
    port: {
      doc: 'Database port',
      format: 'port',
      env: 'DB_PORT',
      default: <%= dialect.port %>,
    },
    username: {
      doc: 'Database username',
      format: String,
      env: isTest ? undefined : 'DB_USER',
      default: isTest ? '<%= shortname %>-test' : '',
    },
    password: {
      doc: 'Database password',
      format: String,
      env: isTest ? undefined : 'DB_PASSWORD',
      default: isTest ? '<%= shortname %>-test' : '',
    },
    database: {
      doc: 'Database name',
      format: String,
      env: isTest ? undefined : 'DB_NAME',
      default: isTest ? '<%= shortname %>_test' : '',
    },
  },<% } %><% if (redis) { %>

  /**
   * Redis config
   */
  redis: {
    host: {
      doc: 'Redis host',
      format: String,
      env: isTest ? undefined : 'REDIS_HOST',
      default: isTest ? 'TEST_REDIS_HOST' : '',
    },
    port: {
      doc: 'Redis port',
      format: 'port',
      env: 'REDIS_PORT',
      default: 6379,
    },
  },<% } %><% if (jwt) { %>

  /**
   * JWT config
   */
  jwt: {
    secret: {
      doc: 'JWT secret',
      format: String,
      env: isTest ? undefined : 'JWT_SECRET',
      default: isTest ? 'TEST_JWT_SECRET' : '',
      sensitive: true,
    },
    algorithm: {
      doc: 'JWT algorithm',
      format: [
        'HS256',
        'HS384',
        'HS512',
        'RS256',
        'RS384',
        'RS512',
        'ES256',
        'ES384',
        'ES512',
        'PS256',
        'PS384',
        'PS512',
        'none',
      ],
      default: 'HS256',
    },
  },<% } %><% if (nodemailer) { %>

  /**
   * SMTP config
   */
  smtp: {
    host: {
      doc: 'SMTP host',
      format: String,
      env: isTest ? undefined : 'SMTP_HOST',
      default: isTest ? 'TEST_SMTP_HOST' : '',
    },
    port: {
      doc: 'SMTP port',
      format: 'port',
      env: 'SMTP_PORT',
      default: 465,
    },
    user: {
      doc: 'SMTP user',
      format: String,
      env: isTest ? undefined : 'SMTP_USER',
      default: isTest ? 'TEST_SMTP_USER' : '',
    },
    password: {
      doc: 'SMTP password',
      format: String,
      env: isTest ? undefined : 'SMTP_PASSWORD',
      default: isTest ? 'TEST_SMTP_PASSWORD' : '',
    },
  },<% } %><% if (sentry) { %>

  /**
   * Sentry config
   */
  sentry: {
    doc: 'Sentry configuration options',
    format: Object,
    default: {
      dsn: process.env.SENTRY_DSN,
      environment: process.env.SENTRY_ENVIRONMENT,
      enabled: isProduction,
      tracesSampleRate: 1.0,
    },
  },<% } %>
});

// Validate current config
config.validate({ allowed: 'strict' });

export default {
  // Export plain config object
  ...config.getProperties(),

  // Export environment config
  env,
  isTest,
  isProduction,
};
