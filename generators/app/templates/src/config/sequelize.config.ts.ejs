import { resolve } from 'path';
import { SequelizeOptions } from 'sequelize-typescript';
import { Container } from 'typedi';<% if (winston) { %>
import { Logger } from 'winston';<% var loggerType = 'Logger'; %><% } else { %><% var loggerType = 'Console'; %><% } %>
import { config } from './app.config';

export const sequelizeOptions: SequelizeOptions = {
  dialect: '<%= dialect.value %>',
  host: config.db.host,
  port: config.db.port,
  username: config.db.username,
  password: config.db.password,
  database: config.db.database,
  define: {
    charset: 'utf8',
    collate: 'utf8_general_ci',
    createdAt: false,
    updatedAt: false,
    underscored: true,
  },
  benchmark: true,
  logQueryParameters: config.debug,
  models: [resolve(__dirname, '../models/*.model.ts')],
  modelMatch: (filename, member) => filename.replace('.model.ts', '') === member.toLowerCase(),
  logging: (sql, timing) => {
    const logger = Container.get<<%= loggerType %>>('logger');

    logger.debug(`${timing}ms - ${sql}`);
  },
};
