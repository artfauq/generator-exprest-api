import jwt from 'jsonwebtoken';
import { config } from '../../config';
import { UserRoleEnum } from '../../types/enums';
import { generateSignedJWT } from '../jwt.util';
import { generateUUID } from '../string.util';

describe('JWT utils', () => {
  describe('generateSignedJWT()', () => {
    it('should return a signed JWT', () => {
      const userId = generateUUID();
      const payload = {
        id: userId,
        email: 'john@doe.com',
        fullName: 'John Doe',
        role: UserRoleEnum.User,
      };

      const token = generateSignedJWT(userId, payload);

      const decodedToken = jwt.decode(token, { json: true }) as { [key: string]: any };

      expect(decodedToken).toStrictEqual({
        iat: expect.any(Number),
        iss: config.publicHost,
        jti: expect.any(String),
        sub: userId,
        id: userId,
        email: payload.email,
        fullName: payload.fullName,
        role: UserRoleEnum.User,
      });
    });
  });
});
