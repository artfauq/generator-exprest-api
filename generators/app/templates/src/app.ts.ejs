<% if (admin) { %>import AdminJSExpress from '@adminjs/express';
<% } %><% if (sentry) { %>import * as Sentry from '@sentry/node';
<% } %>import { json, urlencoded } from 'body-parser';
import compression from 'compression';<% if (admin) { %>
import connectSequelize from 'connect-session-sequelize';<% } %>
import cors from 'cors';
import express, { Application<% if (auth) { %>, Request<% } %> } from 'express';
import rateLimit from 'express-rate-limit';<% if (admin) { %>
import session, { SessionOptions } from 'express-session';<% } %><% if (monitoring) { %>
import statusMonitor from 'express-status-monitor';<% } %>
import helmet from 'helmet';<% if (socketIo) { %>
import { Server } from 'http';<% } %><% if (i18n) { %>
import i18next, { i18n as I18n } from 'i18next';
import i18nHttpMiddleware from 'i18next-http-middleware';<% } %>
import { join } from 'path';
import { <% if (auth) { %>Action, <% } %>useExpressServer } from 'routing-controllers';<% if (sequelize) { %>
import { Sequelize } from 'sequelize-typescript';<% } %>
import favicon from 'serve-favicon';<% if (socketIo) { %>
import SocketIO from 'socket.io';<% } %><% if (admin || i18n || socketIo) { %>
import { Container } from 'typedi';<% } %>
import { config<% if (i18n) { %>, i18nOptions<% } %><% if (admin) { %>, setupAdminJs<% } %> } from './config';
import { errorHandler<% if (morgan) { %>, httpRequestLogging<% } %>, routeNotFoundHandler } from './middlewares';<% if (admin) { %>
import { AdminService } from './services';<% } %>
import { MillisecondEnum } from './types/enums';<% if (admin) { %>

const SequelizeStore = connectSequelize(session.Store);<% } %>

/**
 * Method used to setup middlewares and routing for the `app` instance.
 */
export default async function initializeApp(app: Application) {<% if (i18n) { %>
  // Initialize i18n resources
  const i18n = await new Promise<I18n>((resolve, reject) =>
    i18next.use(i18nHttpMiddleware.LanguageDetector).init(i18nOptions, err => {
      if (err) reject(new Error(`failed to initialize i18n instance. ${err}`));
      else resolve(i18next);
    }),
  );

  Container.set('i18n', i18n);<% } %><% if (admin) { %>

  // Initialize admin panel
  const adminJs = setupAdminJs();

  const sequelize = Container.get<Sequelize>('sequelize');
  const store = new SequelizeStore({
    db: sequelize,
    checkExpirationInterval: MillisecondEnum.FifteenMinutes,
    expiration: MillisecondEnum.OneDay,
  });

  await store.sync();

  const adminSessionOptions: SessionOptions = {
    cookie: {
      httpOnly: true,
      secure: config.isProduction,
    },
    name: 'adminjs',
    resave: true,
    saveUninitialized: true,
    secret: config.secret,
    store,
  };

  const adminRouter = AdminJSExpress.buildAuthenticatedRouter(
    adminJs,
    {
      authenticate: Container.get(AdminService).authenticateAdmin,
      cookieName: adminSessionOptions.name,
      cookiePassword: adminSessionOptions.secret as string,
    },
    null,
    adminSessionOptions,
  );

  app.use(adminJs.options.rootPath, adminRouter);<% } %><% if (socketIo) { %>

  // Initialize SocketIO
  const server = Container.get<Server>('server');

  const socket = SocketIO(server, { path: '/socket.io' });

  Container.set('socket', socket);<% } %><% if (sentry) { %>

  // Setup Sentry
  app.use(
    Sentry.Handlers.requestHandler({
      user: ['id', 'email'],
    }),
  );
  app.use(Sentry.Handlers.tracingHandler());<% } %><% if (monitoring) { %>

  // Setup status monitoring
  app.use(
    statusMonitor({
      path: '/status',
      title: '<%= name %>  | Monitoring',<% if (socketIo) { %>
      websocket: socket,<% } %>
    }),
  );<% } %>

  // Setup app middlewares
  app.enable('trust proxy');<% if (i18n) { %>
  app.use(i18nHttpMiddleware.handle(i18n));
  app.use((req, res, next) => {
    if (req.i18n) {
      Container.set('i18n', req.i18n);
    }

    next();
  });<% } %>
  app.use(compression());
  app.use(cors());
  app.use(favicon(join(config.assetsPath, 'favicon.ico')));
  app.use(helmet());<% if (morgan) { %>
  app.use(httpRequestLogging(app));<% } %>
  app.use(json());
  app.use(
    rateLimit({
      windowMs: MillisecondEnum.FiveMinutes,
      max: 100,
      message: <% if (i18n) { %>i18n.t('errors:tooManyRequests')<% } else { %>'Too many requests, please try again later.'<% } %>,
      skip: () => !config.isProduction,
    }),
  );
  app.use(urlencoded({ extended: true }));

  // Register controllers
  useExpressServer<Application>(app, {
    classTransformer: true,
    controllers: [join(__dirname, `./controllers/*.controller.${config.isTest ? 'ts' : 'js'}`)],<% if (auth) { %>
    currentUserChecker: (action: Action) => (action.request as Request).user,<% } %>
    defaultErrorHandler: false,
    defaults: {
      undefinedResultCode: 204,
    },
  });

  // Setup routes<% if (openapi) { %>
  app.use('/doc', express.static(join(config.assetsPath, '/doc')));<% } %>
  app.use('/public', express.static(config.assetsPath));
<% if (sentry) { %>
  app.use(Sentry.Handlers.errorHandler());<% } %>
  app.use(routeNotFoundHandler());
  app.use(errorHandler());
}
