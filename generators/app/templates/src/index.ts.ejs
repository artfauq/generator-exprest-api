<% if (sentry) { %>import * as Sentry from '@sentry/node';
import * as Tracing from '@sentry/tracing';
<% } %>import express from 'express';
import { createServer } from 'http';
import { Container } from 'typedi';<% if (sentry) { %>
import config from './config';<% } %>
import logger from './config/logger';<% if (sequelize || nodemailer || redis || i18n || socketIo || admin || cron) { %>
import * as loaders from './loaders';<% } %>
import startServer from './server';

// Create Express application and HTTP server
const app = express();
const server = createServer(app);<% if (sentry) { %>

// Initialize Sentry
Sentry.init({
  ...config.sentry,
  integrations: [
    // Enable HTTP calls tracing
    new Sentry.Integrations.Http({ tracing: true }),
    // Enable Express.js middleware tracing
    new Tracing.Integrations.Express({ app }),
    // Enable uncaught exceptions tracing
    new Sentry.Integrations.OnUncaughtException(),
    // Enable unhandled rejections tracing
    new Sentry.Integrations.OnUnhandledRejection(),
  ],
});<% } %>

(async () => {<% if (sequelize) { %>
  // Initialize Sequelize instance
  const sequelize = await loaders.sequelize({ logger });
<% } %><% if (nodemailer) { %>
  // Initialize mailer instance
  const mailer = await loaders.mailer({ logger });
<% } %><% if (redis) { %>
  // Initialize Redis client
  const redis = await loaders.redis({ logger });
<% } %><% if (i18n) { %>
  // Initialize i18n
  const i18n = await loaders.i18n({ logger });
<% } %><% if (socketIo) { %>
  // Initialize Socket.IO server
  const socket = loaders.socketIo({ logger, server });
<% } %><% if (admin) { %>
  // Initialize admin panel
  const adminBro = loaders.adminBro({ logger, sequelize });
<% } %>
  // Inject dependencies
  Container.set('logger', logger);<% if (sequelize) { %>
  Container.set('sequelize', sequelize);<% } %><% if (nodemailer) { %>
  Container.set('mailer', mailer);<% } %><% if (redis) { %>
  Container.set('redis', redis);<% } %><% if (i18n) { %>
  Container.set('i18n', i18n);<% } %><% if (socketIo) { %>
  Container.set('socket', socket);<% } %><% if (admin) { %>
  Container.set('adminBro', adminBro);<% } %><% if (cron) { %>

  // Initialize job scheduler
  loaders.jobScheduler();<% } %>

  // Start server
  startServer(app, server);
})().catch(err => {
  logger.error('Application initialization failed. %o', err);

  process.exit(1);
});

export = server;
