<% if (eslint) { %>/* eslint-disable @typescript-eslint/no-unsafe-member-access */
<% } %><% if (celebrate) { %>import { JoiObject, ValidationError } from '@hapi/joi';
import { isCelebrate } from 'celebrate';
<% } %>import { ErrorRequestHandler } from 'express';
import createHttpError from 'http-errors';<% if (i18n) { %>
import { i18n as I18n } from 'i18next';<% } %>
import { Container } from 'typedi';<% if (winston) { %>
import { Logger } from 'winston';<% var loggerType = 'Logger'; %><% } else { %><% var loggerType = 'Console'; %><% } %>
import config from '../config';<% if (celebrate) { %>

interface CelebrateError extends Error, JoiObject {
  joi: ValidationError;
}

/**
 * Returns `true` if the error originated from the `celebrate` middleware.
 */
function isCelebrateError(err: any): err is CelebrateError {
  return isCelebrate(err) || (<CelebrateError>err).joi != null || (<CelebrateError>err).isJoi;
}

/**
 * Middleware used to parse `celebrate` errors.
 */
export const celebrateErrorHandler = (): ErrorRequestHandler => (err, req, res, next) => {
  if (!isCelebrateError(err)) {
    return next(err);
  }

  let { message } = err;

  if (err.joi) {
    const { details } = err.joi;

    message = details ? details[0].message : err.joi.message;
  }

  return next(createHttpError(400, err, { message }));
};<% } %><% if (sequelize) { %>

/**
 * Middleware used to parse `sequelize` errors.
 */
export const sequelizeErrorHandler = (): ErrorRequestHandler => {
  return (err, req, res, next) => {
    if (err.name !== 'SequelizeDatabaseError') {
      return next(err);
    }

    const message = `${err.message}. Query: ${err.sql}`;

    return next(createHttpError(500, err, { message }));
  };
};<% } %>

/**
 * Parses an error to retrieve its HTTP `status`.
 */
const parseErrorStatus = (err: { status?: number | string }): number => {
  if (!err.status) {
    return 500;
  }

  return typeof err.status === 'number' ? err.status : parseInt(err.status, 10);
};

/**
 * Parses an error to retrieve its `message`.
 */
const parseErrorMessage = (err: { message?: string }, status: number): string => {<% if (i18n) { %>
  const i18n = Container.get<I18n>('i18n');
<% } %>
  return status >= 500 && config.isProduction
    ? <% if (i18n) { %>i18n.t('errors:internalServerError')<% } else { %>'Internal server error.'<% } %>
    : err.message || `${err}`;
};

/**
 * Middleware used to handle HTTP error responses.
 *
 * This middleware should be declared after all other middlewares as it will end the response
 * process.
 */
export const errorHandler = (): ErrorRequestHandler => {
  const logger = Container.get<<%= loggerType %>>('logger');

  return (err, req, res, next) => {
    // Parse error status
    const status = parseErrorStatus(err);

    // Parse error message
    const message = parseErrorMessage(err, status);

    // Format HTTP error
    const error = createHttpError(status, message);

    // Log error<% if (auth && sentry) { %>
    const { user } = req;
<% } %>
    if (status < 500) {
      logger.warn(error<% if (auth && sentry) { %>, { user }<% } %>);
    } else {
      logger.error(error<% if (auth && sentry) { %>, { user }<% } %>);
    }

    // Set response status
    res.status(error.status);

    // Set response content according to acceptable format
    res.format({
      text: () => {
        res.send(`Error ${status} - ${error.name}: ${message}`);
      },

      json: () => {
        res.json({ status, name: error.name, message });
      },
    });
  };
};
