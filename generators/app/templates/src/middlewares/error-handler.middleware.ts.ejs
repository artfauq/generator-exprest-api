<% if (validation) { -%>import { ValidationError as ClassValidationError } from 'class-validator';
<% } %>import { ErrorRequestHandler } from 'express';<% if (jwt) { %>
import { UnauthorizedError as JWTUnauthorizedError } from 'express-jwt';<% } %><% if (i18n) { %>
import { i18n as I18n } from 'i18next';<% } %>
import { <% if (validation) { %>BadRequestError, <% } %>HttpError<% if (jwt) { %>, UnauthorizedError<% } %> } from 'routing-controllers';
import { Container } from 'typedi';<% if (winston) { %>
import { Logger } from 'winston';<% var loggerType = 'Logger'; %><% } else { %><% var loggerType = 'Console'; %><% } %>
import { config } from '../config';<% if (validation) { %>

/**
 * Returns `true` if the error originated from the `class-validator` library.
 */
function isClassValidatorError(err: any): err is ClassValidationError {
  return err instanceof ClassValidationError;
}<% } %>

/**
 * Parses the `err` object and returns a standard HTTP error.
 */
function parseHttpError(err: any): HttpError {<% if (validation) { %>
  if (Array.isArray(err.errors) && isClassValidatorError(err.errors[0])) {
    const error = err.errors[0];
    const message = error.constraints ? Object.values(error.constraints)[0] : error.toString();

    return new BadRequestError(message);
  }
<% } %>
  if (err instanceof HttpError) {
    return err;
  }<% if (jwt) { %>

  if (err instanceof JWTUnauthorizedError) {
    return new UnauthorizedError(err.message);
  }<% } %>

  return new HttpError(err.status || err.statusCode || 500, err.message || `${err}`);
}

/**
 * Middleware used to handle HTTP error responses.
 *
 * This middleware should be declared after all other middlewares as it will end the response
 * process.
 */
export const errorHandler = (): ErrorRequestHandler => {<% if (i18n) { %>
  const i18n = Container.get<I18n>('i18n');<% } %>
  const logger = Container.get<<%= loggerType %>>('logger');

  return (err, req, res, next) => {
    if (res.headersSent) return;

    const error = parseHttpError(err);

    if (error.httpCode < 500) {
      logger.warn('%o', err);
    } else {
      logger.error('%o', err);
    }

    if (config.isProduction && error.httpCode >= 500) {
      error.message = <% if (i18n) { %>i18n.t('errors:internalServerError')<% } else { %>'Internal server error.'<% } %>;
    }

    res.format({
      'text/plain': () => {
        res
          .status(error.httpCode)
          .send(`Error ${error.httpCode} - ${error.name}: ${error.message}`);
      },

      'text/html': () => {
        res
          .status(error.httpCode)
          .send(`<p>Error ${error.httpCode} - ${error.name}: ${error.message}</p>`);
      },

      'application/json': () => {
        res.status(error.httpCode).json({
          status: error.httpCode,
          name: error.name,
          message: error.message,
        });
      },

      'default': () => {
        res.status(406).send('Not Acceptable');
      },
    });
  };
};
