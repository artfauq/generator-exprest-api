import 'reflect-metadata';<% if (sentry) { %>
import * as Sentry from '@sentry/node';
import * as Tracing from '@sentry/tracing';<% } %>
import express from 'express';
import { createServer } from 'http';<% if (sequelize) { %>
import { Sequelize } from 'sequelize-typescript';<% } %>
import { Container } from 'typedi';<% if (winston) { %>
import { createLogger } from 'winston';<% } %>
import initializeApp from './app';
import { config<% if (winston) { %>, loggerOptions<% } %><% if (sentry) { %>, sentryOptions<% } %><% if (sequelize) { %>, sequelizeOptions<% } %> } from './config';<% if (smtp || redis) { %>
import { <% if (smtp) { %>EmailService<% if (redis) { %>, <% } %><% } %><% if (redis) { %>RedisService<% } %> } from './services';<% } %>

(async () => {
  const app = express();
  const server = createServer(app);

  const logger = <% if (winston) { %>createLogger(loggerOptions)<% } else { %>console<% } %>;<% if (sequelize) { %>
  const sequelize = new Sequelize(sequelizeOptions);<% } %>

  Container.set('logger', logger);
  Container.set('server', server);<% if (sequelize) { %>
  Container.set('sequelize', sequelize);

  // Test database connection
  await sequelize
    .authenticate()
    .then(() =>
      logger.info(
        `Successfully connected to database '${config.db.database}' at '${config.db.host}:${config.db.port}'`,
      ),
    );<% } %><% if (smtp) { %>

  // Test SMTP connection
  const emailService = Container.get(EmailService);

  await emailService
    .testConnection()
    .then(() => logger.info('Successfully connected to SMTP server'));<% } %><% if (redis) { %>

  // Test Redis connection
  const redisService = Container.get(RedisService);

  await redisService
    .testConnection()
    .then(() => logger.info('Successfully connected to Redis server'));<% } %>

  // Initialize app
  initializeApp(app);<% if (sentry) { %>

  // Initialize Sentry
  Sentry.init({
    ...sentryOptions,
    integrations: [
      new Sentry.Integrations.Http({ tracing: true }),
      new Sentry.Integrations.ContextLines(),
      new Sentry.Integrations.OnUncaughtException(),
      new Sentry.Integrations.OnUnhandledRejection(),
      new Sentry.Integrations.RequestData(),
      new Tracing.Integrations.Express({ app }),
    ],
  });<% } %>

  // Start server
  await new Promise<void>(resolve => {
    server.listen(config.port, () => {
      logger.info(`App is running on port ${config.port} in ${config.env} mode`);

      resolve();
    });
  });
})().catch(err => {
  console.error('Application initialization failed:', err);

  process.exit(1);
});
