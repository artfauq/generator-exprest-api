version: '3'

services:
  node:
    build:
      target: final<% if (sequelize || redis) { %>
    entrypoint: dockerize<% if (sequelize) { %> -wait tcp://db:${DB_PORT}<% } %><% if (redis) { %> -wait tcp://redis:${REDIS_PORT}<% } %> -timeout 30s node ./dist/index.js<% } %><% if (nginx) { %>
    environment:
      VIRTUAL_HOST: $LETSENCRYPT_HOST
      LETSENCRYPT_HOST: $LETSENCRYPT_HOST
      LETSENCRYPT_EMAIL: $LETSENCRYPT_EMAIL<% } %>
    restart: unless-stopped<% if (sequelize) { %>

  db:
    restart: unless-stopped<% if (dialect.value === 'mysql') { %>

  db-backup:
    image: fradelg/mysql-cron-backup
    container_name: <%= shortname %>-db-backup
    depends_on:
      - db
    volumes:
      - ./backup:/backup
    environment:
      MYSQL_HOST: db
      MYSQL_PORT: $DB_PORT
      MYSQL_USER: $DB_USER
      MYSQL_PASS: $DB_PASSWORD
      MYSQL_DB: $DB_NAME
      MAX_BACKUPS: 10
      INIT_BACKUP: 0
      CRON_TIME: 0 3 * * *
    restart: unless-stopped<% } %><% } %><% if (nginx) { %>

  nginx-proxy:
    image: nginx:1.13.1
    container_name: nginx-proxy
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - conf:/etc/nginx/conf.d
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - certs:/etc/nginx/certs
    labels:
      - 'com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy=true'

  docker-gen:
    image: jwilder/docker-gen:0.7.3
    container_name: nginx-proxy-gen
    depends_on:
      - nginx-proxy
    command: -notify-sighup nginx-proxy -watch -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf
    volumes_from:
      - nginx-proxy
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./docker/nginx/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro

  letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    container_name: nginx-proxy-le
    depends_on:
      - nginx-proxy
      - docker-gen
    environment:
      NGINX_PROXY_CONTAINER: nginx-proxy
      NGINX_DOCKER_GEN_CONTAINER: nginx-proxy-gen
    volumes_from:
      - nginx-proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

volumes:
  conf:
  vhost:
  html:
  certs:<% } %>
