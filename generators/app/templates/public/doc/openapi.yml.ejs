openapi: 3.0.0
info:
  title: <%- name %>
  version: 0.0.0
  description: |
    # Introduction
    This is the API documentation of **<%- name %>**. It is documented in *OpenAPI* format.
<% if (auth) { %>
    # Authentication
    <%- name %> uses **JWT** Bearer authentication to authenticate requests.

    Protected endpoints require an HTTP Bearer Authorization header in the form of:

    ```
    Authorization: Bearer <token>
    ```

    <SecurityDefinitions />
<% } %>
    # Errors

    This API uses conventional HTTP response codes to indicate the success or failure of an API request.

    All errors are in the following format:

    | Attribute   | Type     | Description                                                 |
    |-------------|----------|-------------------------------------------------------------|
    | **status**  | *number* | HTTP response code (`2xx`, `4xx`, `500`)                    |
    | **name**    | *string* | Name of the error (`ValidationError`, `NotFoundError`, etc) |
    | **message** | *string* | A readable error message
servers:
  - url: http://localhost:8080/api
    description: Local development server<% if (auth ||Â sequelize) { %>
tags:<% if (auth) { %>
  - name: auth-login
    x-displayName: Login<% } %><% if (sequelize) { %>
  - name: user
    x-displayName: User<% } %>
x-tagGroups:<% if (auth) { %>
  - name: Auth
    tags:
      - auth-login<% } %>
  - name: Users<% if (sequelize) { %>
    tags:
      - user<% } %><% } %>
paths:
  /health:
    get:
      summary: Check server health
      responses:
        204:
          $ref: '#/components/responses/204'<% if (auth) { %>
  /auth/login:
    post:
      summary: Authenticate user
      description: Authenticates a user and returns a JWT token.
      tags:
        - auth-login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDTO'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                properties:
                  token:
                    type: string
                    description: JWT token
        401:
          $ref: '#/components/responses/401'<% } %><% if (sequelize) { %>
  /users:
    post:
      summary: Create new user
      description: Creates a new user.
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDTO'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/400'
  /users/{userId}:
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      summary: Get user details
      description: Returns the details of a user.
      tags:
        - user
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'<% if (auth) { %>
        401:
          $ref: '#/components/responses/401'<% } %>
        404:
          $ref: '#/components/responses/404'<% } %>
components:<% if (auth) { %>
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT<% } %>
  responses:
    204:
      description: No Content
    400:
      description: Bad Request - Invalid or missing request parameters / body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HttpError'
    401:
      description: Unauthorized - Invalid or missing authorization token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HttpError'
    403:
      description: Forbidden - Access forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HttpError'
    404:
      description: Not Found - Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HttpError'
  schemas:
    HttpError:
      properties:
        status:
          type: number
          description: HTTP error code
          example: 400
        name:
          type: string
          description: Error name
          example: BadRequestError
        message:
          type: string
          description: Readable error message
          example: Missing parameter 'email'<% if (sequelize) { %>
    CreateUserDTO:
      title: User
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
      properties:
        firstName:
          type: string
          maxLength: 64
          nullable: false
          description: First name of the user
        lastName:
          type: string
          maxLength: 64
          nullable: false
          description: Last name of the user
        email:
          type: string
          format: email
          maxLength: 128
          nullable: false
          description: Email of the user
        password:
          type: string
          format: password
          minLength: 8
          maxLength: 64
          nullable: false
          description: Password of the user<% } %><% if (auth) { %>
    LoginDTO:
      description: User's credentials
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          nullable: false
          description: Email of the user
        password:
          type: string
          format: password
          nullable: false
          description: Password of the user<% } %><% if (sequelize) { %>
    User:
      title: User
      description: User details
      properties:
        id:
          type: string
          format: uuid
          nullable: false
          description: ID of the user
        firstName:
          type: string
          nullable: false
          description: First name of the user
        lastName:
          type: string
          nullable: false
          description: Last name of the user
        fullName:
          type: string
          nullable: false
          description: Full name of the user
        email:
          type: string
          format: email
          nullable: false
          description: Email of the user
        createdAt:
          type: string
          format: date-time
          nullable: false
          description: Date and time of the user's profile creation
  parameters:
    userId:
      in: path
      name: userId
      description: ID of the user
      required: true
      allowEmptyValue: false
      schema:
        type: string
        format: uuid<% } %>
