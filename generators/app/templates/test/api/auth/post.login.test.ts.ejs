import jwt from 'jsonwebtoken';
import supertest from 'supertest';
import config from '../../../src/config';
import { UserModel } from '../../../src/models';
import {
  cleanDatabase,<% if (celebrate) { %>
  expectBadRequestError,<% } %>
  expectOk,
  expectUnauthorizedError,
} from '../../helpers';
import { app } from '../../jest.setup';

const api = supertest(app);

/**
 * POST /auth/login
 */
describe('POST /auth/login', () => {
  let user: UserModel;

  beforeAll(async () => {
    await cleanDatabase();

    user = await UserModel.create({
      firstName: 'John',
      lastName: 'Doe',
      email: 'john.doe@gmail.com',
      password: 'p4ssW0rd',
    });
  });

  it('should return 200 on user login', async () => {
    const requestData = {
      email: 'john.doe@gmail.com',
      password: 'p4ssW0rd',
    };

    const res = await api
      .post('/auth/login')
      .set('Accept', 'application/json')
      .set('Content-Type', 'application/json')
      .send(requestData);

    expectOk(res);

    expect(Object.keys(res.body)).toContain('token');

    expect(typeof res.body.token).toBe('string');

    const decodedToken = jwt.decode(res.body.token, { json: true }) as { [key: string]: any };

    expect(Object.keys(decodedToken)).toEqual(
      expect.arrayContaining(['email', 'iat', 'iss', 'jti', 'name', 'sub']),
    );
    expect(decodedToken).toMatchObject({
      email: user.email,
      iss: config.publicHost,
      name: user.fullName,
      sub: user.id,
    });
    expect(typeof decodedToken.iat).toBe('number');
    expect(typeof decodedToken.jti).toBe('string');
  });<% if (celebrate) { %>

  it('should return 400 on missing email field', async () => {
    const requestData = { password: 'p4ssW0rd' };

    const res = await api
      .post('/auth/login')
      .set('Accept', 'application/json')
      .set('Content-Type', 'application/json')
      .send(requestData);

    expectBadRequestError(res);
  });

  it('should return 400 on missing password field', async () => {
    const requestData = { email: 'john.doe@gmail.com' };

    const res = await api
      .post('/auth/login')
      .set('Accept', 'application/json')
      .set('Content-Type', 'application/json')
      .send(requestData);

    expectBadRequestError(res);
  });<% } %>

  it('should return 401 on incorrect email', async () => {
    const requestData = {
      email: 'wrong.email@gmail.com',
      password: 'p4ssW0rd',
    };

    const res = await api
      .post('/auth/login')
      .set('Accept', 'application/json')
      .set('Content-Type', 'application/json')
      .send(requestData);

    expectUnauthorizedError(res);
  });

  it('should return 401 on incorrect password', async () => {
    const requestData = {
      email: 'john.doe@gmail.com',
      password: 'wrong_password',
    };

    const res = await api
      .post('/auth/login')
      .set('Accept', 'application/json')
      .set('Content-Type', 'application/json')
      .send(requestData);

    expectUnauthorizedError(res);
  });
});
