import supertest from 'supertest';
import { v4 as uuidv4 } from 'uuid';
import { UserModel } from '../../../src/models';
import {
  cleanDatabase,
  expectNotFoundError,
  expectOk,
  expectUnauthorizedError,
} from '../../helpers';
import { app } from '../../jest.setup';

const api = supertest(app);

/**
 * GET /users/:userId
 */
describe('GET /users/:userId', () => {
  let user: UserModel;
  let userId: string;
  let token: string;

  beforeAll(async () => {
    await cleanDatabase();

    user = await UserModel.create({
      firstName: 'John',
      lastName: 'Doe',
      email: 'john.doe@gmail.com',
      password: 'p4ssW0rd',
    });
    userId = user.id;
    token = user.generateJWT();
  });

  it('should return 200 and the details of the user', async () => {
    const res = await api
      .get(`/users/${userId}`)
      .set('Accept', 'application/json')
      .set('Authorization', `Bearer ${token}`)
      .set('Content-Type', 'application/json');

    expectOk(res);

    expect(Object.keys(res.body)).toEqual(
      expect.arrayContaining(['id', 'fullName', 'email', 'createdAt']),
    );
  });

  it('should return 404 on user not found', async () => {
    const res = await api
      .get(`/users/${uuidv4()}`)
      .set('Accept', 'application/json')
      .set('Authorization', `Bearer ${token}`)
      .set('Content-Type', 'application/json');

    expectNotFoundError(res);
  });

  it('should return 401 on user not authenticated', async () => {
    await user.destroy();

    const res = await api
      .get(`/users/${userId}`)
      .set('Accept', 'application/json')
      .set('Content-Type', 'application/json');

    expectUnauthorizedError(res);
  });
});
