import 'reflect-metadata';
import express from 'express';
import { createServer } from 'http';<% if (smtp) { %>
import Mail from 'nodemailer/lib/mailer';<% } %>
import { useContainer } from 'routing-controllers';<% if (sequelize) { %>
import { Sequelize } from 'sequelize-typescript';<% } %>
import request, { SuperAgentTest } from 'supertest';
import { Container } from 'typedi';<% if (winston) { %>
import { createLogger } from 'winston';<% } %>
import initializeApp from '../src/app';
import { config<% if (winston) { %>, loggerOptions<% } %><% if (sequelize) { %>, sequelizeOptions<% } %> } from '../src/config';<% if (smtp) { %>
import { EmailService } from '../src/services';
import { mailerMock } from './mocks';<% } %>

useContainer(Container);

export let agent: SuperAgentTest;

const app = express();
const server = createServer(app);

beforeAll(async () => {
  const logger = <% if (winston) { %>createLogger(loggerOptions)<% } else { %>console<% } %>;<% if (sequelize) { %>
  const sequelize = new Sequelize(sequelizeOptions);<% } %>

  Container.set('logger', logger);<% if (sequelize) { %>
  Container.set('sequelize', sequelize);<% } %>
  Container.set('server', server);<% if (smtp) { %>

  Container.get(EmailService).mailer = mailerMock as unknown as Mail;<% } %>

  initializeApp(app);

  await new Promise<void>(resolve => {
    server.listen(config.port, () => {
      agent = request.agent(app);

      resolve();
    });
  });
});

afterAll(async () => {
  await new Promise<void>((resolve, reject) => {
    server.close(err => {
      if (err) reject(err);
      else resolve();
    });
  });
});
