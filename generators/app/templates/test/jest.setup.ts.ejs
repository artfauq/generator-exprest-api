import express from 'express';
import { createServer } from 'http';<% if (sequelize) { %>
import { Sequelize } from 'sequelize';<% } %>
import { Container } from 'typedi';
import logger from '../src/config/logger.config';<% if (sequelize || i18n || socketIo) { %>
import * as loaders from '../src/loaders';<% } %>
import startServer from '../src/server';<% if (stubs) { %>
import { <% if (nodemailer) { %>mailerStub, <% } %><% if (redis) { %>redisStub<% } %> } from './helpers';<% } %>

// Create Express application and HTTP server
export const app = express();
export const server = createServer(app);

beforeAll(async () => {
  try {<% if (sequelize) { %>
    // Initialize Sequelize instance
    const sequelize = await loaders.sequelize({ logger });
<% } %><% if (i18n) { %>
    // Initialize i18n
    const i18n = await loaders.i18n({ logger });
<% } %><% if (socketIo) { %>
    // Initialize Socket.IO server
    const socket = loaders.socketIo({ logger, server });
<% } %>
    // Inject dependencies
    Container.set('logger', logger);<% if (sequelize) { %>
    Container.set('sequelize', sequelize);<% } %><% if (nodemailer) { %>
    Container.set('mailer', mailerStub);<% } %><% if (redis) { %>
    Container.set('redis', redisStub);<% } %><% if (i18n) { %>
    Container.set('i18n', i18n);<% } %><% if (socketIo) { %>
    Container.set('socket', socket);<% } %>

    // Start server
    startServer(app, server);

    // Wait for server to listen
    await new Promise<void>(resolve => {
      if (server.listening) {
        resolve();
      } else {
        server.on('listening', resolve);
      }
    });
  } catch (err) {
    logger.error('Tests setup failed.', err);

    process.exit(1);
  }
});

afterAll(async () => {<% if (sequelize) { %>
  // Close database connection
  const sequelize = Container.get<Sequelize>('sequelize');

  await sequelize.close();
<% } %>
  // Wait for server to close
  await new Promise<void>((resolve, reject) => {
    server.close(err => {
      if (err) reject(err);
      else resolve();
    });
  });
});
