# About <!-- omit in toc -->

- [Environment variables](#environment-variables)
- [Project structure](#project-structure)<% if (docker) { %>
- [Docker](#docker)
  - [Development mode](#development-mode)<% if (jest) { %>
  - [Test mode](#test-mode)<% } %>
  - [Production mode](#production-mode)<% } %><% if (sequelize || redis) { %>
- [Services](#services)<% if (sequelize) { %>
  - [Sequelize](#sequelize)<% } %><% if (redis) { %>
  - [Redis](#redis)<% } %><% } %>
- [Features](#features)
  - [Dependency injection](#dependency-injection)
  - [DTO and types](#dto-and-types)
  - [Routing](#routing)
  - [Error handling](#error-handling)<% if (validation) { %>
  - [Object validation](#object-validation)<% } %><% if (jest) { %>
  - [Testing](#testing)<% } %><% if (i18n) { %>
  - [i18n](#i18n)<% } %><% if (monitoring) { %>
  - [API status monitoring](#api-status-monitoring)<% } %><% if (sentry) { %>
  - [Sentry](#sentry)<% } %><% if (socketIo) { %>
  - [Socket IO](#socket-io)<% } %><% if (smtp) { %>
  - [Nodemailer](#nodemailer)<% } %><% if (openapi) { %>
  - [API documentation](#api-documentation)<% } %><% if (admin) { %>
  - [Admin panel](#admin-panel)<% } %>
- [Style Guide](#style-guide)
  - [Filenames](#filenames)
  - [Formatting](#formatting)
  - [Linting](#linting)<% if (hook) { %>
  - [Pre-commit hook](#pre-commit-hook)<% } %><% if (openapi) { %>
- [Version update](#version-update)<% } %><% if (winston && morgan) { %>
- [Logs](#logs)<% } %>

## Environment variables

The `.env.example` should list all the environment variables that the application needs to run.

A `.env` file with the environment variable key/value pairs should reside at the root of the project. The `dotenv` package imported in `/src/config/app.config.ts` will make those variables available to the app.

## Project structure

The project is structured as follows:
<% if (sequelize) { %>
- `/db`: database related files
  - `/migrations`: database migrations
  - `/seeders`: database seeders<% } %>
- `/public`: public assets (<% if (openapi) { %>API documentation, <% } %>images, etc)
- `/src`: application source files<% if (admin) { %>
  - `/admin`: admin related files<% } %>
  - `/config`: configuration files
  - `/controllers`: route handlers
  - `/dto`: data transfer objects<% if (i18n) { %>
  - `/locale`: i18n resources<% } %>
  - `/middlewares`: custom middlewares<% if (sequelize) { %>
  - `/models`: ORM models<% } %>
  - `/services`: business logic (database interaction, API interactions, etc)
  - `/types`: custom types
  - `/utils`: utilities and helpers<% if (jest) { %>
- `/test`: e2e test files<% } %>
<% if (winston) { %>
When running the app or performing some commands, additional folders (ignored by Git) will be created such as:
<% if (winston) { %>
- `/logs`: application logs (errors, info, etc...) generated by `winston` when the application is running<% } %>
<% } %><% if (docker) { %>
## Docker

Docker Compose is the recommended method to run this project. This way, the project can easily run either in a `development`<% if (jest) { %>, `test`<% } %> or `production` environment.

These configurations are defined respectively in `docker-compose.dev.yml`<% if (jest) { %>, `docker-compose.test.yml`<% } %> and `docker-compose.prod.yml`. <% if (jest) { %>The `development` and `production`<% } else { %>Both<% } %> configurations inherit from the base configuration defined in `docker-compose.yml`.

To start docker-compose in one of these modes, run the following command:

```sh
yarn docker:start:<dev<% if (jest) { %>|test<% } %>|prod>
```<% if (sequelize || redis) { %>

Running this command will start the following containers:

- `<%= shortname %>`: a Node.JS web server<% if (sequelize) { %>
- `<%= shortname %>-db`: a <%= dialect.name %> database server
- `<%= shortname %>-migrate`: a container that starts to run the database migrations and exits immediately after (it runs right after the `<%= shortname %>` image was built)<% } %><% if (redis) { %>
- `<%= shortname %>-redis`: a Redis server<% } %><% } %>

### Development mode

To start all containers in `development` mode, run:

```sh
yarn docker:start:dev
```

This will:

- Target the `development` stage of the multi-stage [Dockerfile](/docker/node/Dockerfile)
- Run the `yarn start:dev` command in the `<%= shortname %>` container<% if (sequelize) { %>
- Run database migrations from the `<%= shortname %>-migrate` container<% } %>
- Allow the web server to restart automatically on source files changes detected<% if (jest) { %>

### Test mode

To start all containers in `test` mode, run:

```sh
yarn docker:start:test
```

This will:

- Target the `development` stage of the multi-stage [Dockerfile](/docker/node/Dockerfile)
- Run the `yarn test` command in the `<%= shortname %>-test` container<% } %>

### Production mode

To start all containers in `production` mode, run:

```sh
yarn docker:start:prod
```

This will:

- Target the `final` stage of the multi-stage [Dockerfile](/docker/node/Dockerfile)
- Run `node ./dist/server.js` in the `<%= shortname %>` container<% if (sequelize && dialect.value === 'mysql') { %>

In production environment, some other containers are mounted:

- `<%= shortname %>-db-backup`: a container that runs a database backup script as a cron job and outputs the resulting SQL file in a `/backup` folder<% } %>

In addition, all containers are configured to restart automatically unless stopped manually.
<% } %><% if (sequelize || redis) { %>
## Services
<% if (sequelize) { %>
### Sequelize

The project uses [sequelize](https://github.com/sequelize/sequelize) as an ORM to connect to a <%= dialect.name %> database and [sequelize-cli](https://github.com/sequelize/cli) to perform database related commands.

- Database connection options are defined through the `DB_` environment variables
- Sequelize instance options are defined in `/src/config/sequelize.config.ts`
- Sequelize CLI options are defined in `.sequelizerc` and `/db/config.js`

The sequelize instance is injected in the application as the `sequelize` service.

#### Models <!-- omit in toc -->

This project uses [sequelize-typescript](https://github.com/RobinBuschmann/sequelize-typescript) which brings in decorators and some other features for Sequelize.

Sequelize models should be defined in `/src/models`. Each model should be declared in a separate file and imported in `/src/models/index.ts`.

#### Migrations <!-- omit in toc -->

Migrations are defined in `/db/migrations`.

##### Run migrations <!-- omit in toc -->

To update the database with latest model changes, run migrations with [Sequelize CLI](https://github.com/sequelize/cli) with the following command:

```sh
yarn db:migrate
```

To undo the most recent migration, run the following command:

```sh
yarn db:migrate:undo
```

##### Create a new migration <!-- omit in toc -->

To create an empty migration file, run:

```sh
yarn migrations:create <migration_name>
```

For more information about migrations and seeders, please refer to [the docs](https://sequelize.org/master/manual/migrations.html).

#### Seeders <!-- omit in toc -->

Seeders are defined in `/db/seeders`.

##### Run seeders <!-- omit in toc -->

To fill the database with initial data, run seeders with the following command:

```sh
yarn db:seed
```

##### Create a new seeder <!-- omit in toc -->

To create an empty migration file, run:

```sh
yarn seeders:create <migration_name>
```

For more information about migrations and seeders, please refer to [the docs](https://sequelize.org/master/manual/migrations.html#running-seeds).
<% } %><% if (redis) { %>
### Redis

The redis client is configured in `/src/services/redis.service.ts` and injected in the application as the `redis` service.

If you're not familiar with its usage, please refer to [the docs](https://github.com/NodeRedis/node-redis).
<% } %><% } %>
## Features

### Dependency injection

This project uses [typedi](https://github.com/typestack/typedi) to perform dependency injection.

### Routing

- All routes should be defined in `/src/controllers`
- For each main route endpoint, a new file with the route endpoint as filename should be added to the `/controllers` folder
- All the business logic (retrieving, creating or updating data, etc) should be defined in the `/services` folder
<% if (jest) { %>
### Testing

All tests are run with [Jest](https://jestjs.io/).

#### Unit <!-- omit in toc -->

Unit tests are configured in [`jest.config.ts`](./jest.config.ts).

##### Running unit tests <!-- omit in toc -->

Run unit tests with the following command:

```sh
yarn test
```

This will:

- Set the `NODE_ENV` variable to `test`
- Run all tests defined in `/src` (files ending with `.spec.ts`)

#### E2E <!-- omit in toc -->

E2E tests are configured in [`jest-e2e.config.ts`](./jest-e2e.config.ts).

##### Running E2E tests <!-- omit in toc -->

Run E2E tests with the following command:

```sh
yarn test:e2e
```

This will:

- Set the `NODE_ENV` variable to `test`
- Execute the content of `/test/jest.setup.ts`
- Run all tests defined in `/test`

##### E2E tests structure <!-- omit in toc -->

The `/test` folder is structured as follows:

- `/api`: API test files
- `/mocks`: mock definitions
- `/utils`: test utilities

All API tests should be defined in `/test/api` with one directory per main route and inside each directory one file per endpoint.

For example: if a `POST /users` route is defined, the associated test file would be `/test/api/users/post.users.test.ts`.
<% } %><% if (i18n) { %>
### i18n

i18n is configured with [i18next](https://www.i18next.com/) in `/src/config/i18n.loader.ts` and injected in the application as the `i18n` service.

Translations are located in `/src/locale`.

All incoming requests are parsed by `i18next-http-middleware` to retrieve the request's accepted language. The i18n instance and accepted language are then available respectively in `req.i18n` and `req.language`.
<% } %><% if (monitoring) { %>
### API status monitoring

This project uses [express-status-monitor](https://github.com/RafalWilinski/express-status-monitor) to easily monitor the status of the web server.

Monitoring is available at [http://localhost:8080/status] configured in `/src/server.ts`.
<% } %><% if (sentry) { %>
### Sentry

This project uses [@sentry/node](https://docs.sentry.io/platforms/node/guides/express/) to report errors and perform requests tracing.
Sentry is initialized in `/src/server.ts` and enabled only in `production` mode (`NODE_ENV` set to `production`).

To configure Sentry:

- First, create a free account from [sentry.io](https://sentry.io/signup/)
- Create a new project and retrieve its `DSN`
- Fill in the `SENTRY_DSN` and `SENTRY_ENVIRONMENT` environment variables in `.env` (captured automatically by `@sentry/node`)
<% } %><% if (socketIo) { %>
### Socket IO

This project uses [Socket.IO](https://socket.io/docs/v2/) for real-time events which is configured in `/src/app.ts` and injected in the application as the `socket` service.
<% } %><% if (smtp) { %>
### Nodemailer

To send emails, this project uses [Nodemailer](https://github.com/nodemailer/nodemailer).

The SMTP transport is configured in `/src/services/email.service.ts`.

To configure the SMTP connection options, change the `SMTP_` environment variables in `.env`.
<% } %><% if (openapi) { %>
### API documentation

The API documentation is written based on the [OpenAPI](https://swagger.io/specification/) specification and located in the `/public/doc` folder.

The interface is generated by [ReDoc](https://github.com/Rebilly/ReDoc) and is available at `http://localhost:{PORT}/doc` when the server is running.
<% } %><% if (admin) { %>
### Admin panel

The admin panel is generated with [AdminJS](https://docs.adminjs.co/) and configured in `/src/admin/index.ts`.

All admin-related files should reside in `/src/admin`.
<% } %>
## Style Guide

### Filenames

All filenames should use `kebab-case` with a suffix matching the file content (`.model`, `.service`, `.test`, etc).

### Formatting

Formatting rules are defined in `.editorconfig`<% if (prettier) { %> and `.prettierrc`<% } %>.

General formatting rules are:

- Indentation of **2 spaces**
- Max line length of **100 characters**
- **Single quotes** instead of double quotes

The rules defined in `.editorconfig` ensure that the coding style guide will stay consistent between different editors (see [EditorConfig](https://editorconfig.org/) for more info).<% if (prettier) { %>
The rules defined in `.prettierrc` provide more advanced formatting options (see [Linting](#linting) section below).<% } %>

### Linting

Check for linting errors with:

```sh
yarn lint
```
<% if (eslint || prettier) { %>
Automatically fix linting errors with:

```sh
yarn lint:fix
```
<% } %>
More info:

- [tsc](https://www.typescriptlang.org/docs/handbook/compiler-options.html) for TypeScript compiling errors (configuration file: [`tsconfig.json`](tsconfig.json))<% if (eslint) { %>
- [ESlint](https://eslint.org/) for TypeScript/JavaScript linting errors (configuration file: [`.eslintrc.json`](.eslintrc.json))<% } %><% if (prettier) { %>
- [Prettier](https://prettier.io/) for formatting errors (configuration file: [`.prettierrc`](.prettierrc))<% } %>
<% if (hook) { %>
### Pre-commit hook

In addition, a git pre-push hook is configured to run before each `git push` to ensure that linting and formatting are ok.

The hook was created with `husky` and is configured in [`.huskyrc.json`](.huskyrc.json). It runs the `lint-staged` package which itself is configured in `package.json`.

More info:

- [Git hooks](https://git-scm.com/book/uz/v2/Customizing-Git-Git-Hooks)
- [husky](https://github.com/typicode/husky)
- [lint-staged](https://github.com/okonet/lint-staged)
<% } %><% if (openapi) { %>
## Version update

When updating the project's version number, do not forget to update:

- The `version` field in `package.json`
- The `info > version` field in `/public/doc/openapi.yml`
<% } %><% if (winston && morgan) { %>
## Logs

When running, the application outputs some logs. Two modules are used for this:

- [winston](https://github.com/winstonjs/winston): handles all application logs and writes the output to configured transports (file, console, etc)
- [morgan](https://github.com/expressjs/morgan): logs all incoming HTTP requests

Please refer to `/src/config/logger.config.ts` to see winston configuration.
<% } %>